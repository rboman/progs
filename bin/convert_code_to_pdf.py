#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Generated by ChatGPT

import subprocess
import tempfile
import os, sys

def generate_pdf_from_code(script_path, output_filename, script_lang):
    """
    Generates a PDF from a file containing code, using Pandoc.
    """
    if not os.path.exists(script_path):
        raise FileNotFoundError(f"The file '{script_path}' does not exist.")
    
    # try:
    # Read the Python script content
    with open(script_path, "r") as script_file:
        script_content = script_file.read()
    
    preamble = r"""
---
fontsize: 12pt
papersize: a4
geometry: "left=2cm,right=2cm,top=2cm,bottom=3cm"
margin-left: 2cm
margin-right: 2cm
numbersections: true
listings: true
header-includes: |
    \usepackage{lastpage}
    \usepackage{fancyhdr}
    \pagestyle{fancy}
    \fancyhead{}
    \fancyfoot{}
    \fancyfoot[LE,RO]{\thepage/\pageref{LastPage}}
    \fancyfoot[RE,LO]{\sc{\small MATH0471}}
    \renewcommand{\headrulewidth}{0pt}
    \renewcommand{\footrulewidth}{0.4pt}
---
"""
    # Prepare Markdown content with syntax highlighting
    markdown_content = rf"""
{preamble}

# PDF Generated from {os.path.basename(script_path)}

```{script_lang}
{script_content}
```
"""
    # Create a temporary Markdown file
    with tempfile.NamedTemporaryFile(suffix=".md", delete=False) as temp_md_file:
        temp_md_path = temp_md_file.name
        temp_md_file.write(markdown_content.encode("utf-8"))
    
    print('running pandoc')

    # Run Pandoc to convert the Markdown file to a PDF
    command = ["pandoc", temp_md_path, "-o", output_filename]
    result = subprocess.run(command, capture_output=True, text=True)
    
    # Check for errors
    if result.returncode != 0:
        raise RuntimeError(f"Pandoc error: {result.stderr}")
    
    print(f"PDF generated successfully: {output_filename}")

    # finally:
    #     # Clean up the temporary Markdown file
    #     if os.path.exists(temp_md_path):
    #         os.remove(temp_md_path)

if __name__ == "__main__": # Ensure a filename is provided as a command-line argument if len(sys.argv) != 2: print("Usage: python script_to_pdf.py <path_to_python_script>") sys.exit(1)
    script_path = sys.argv[1]
    output_path, output_ext = os.path.splitext(script_path)
    output_filename = output_path + ".pdf"  # Default output PDF file name
    langmap = {
        ".py": "python",
        ".sh": "bash",
        ".c": "c",
        ".cpp": "cpp",
        ".java": "java",
        ".cpp": "cpp",
        ".c": "c"  
    }
    script_lang = langmap[output_ext.lower()]  # may fail if language not in langmap


    print(f"Converting Python script to PDF: {script_path} -> {output_filename} ({script_lang})")

    # try:
    generate_pdf_from_code(script_path, output_filename, script_lang)
    # except FileNotFoundError as e:
    #     print(f"Error: {e}")
    # except RuntimeError as e:
    #     print(f"Error during PDF generation: {e}")

