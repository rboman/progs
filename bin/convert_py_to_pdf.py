#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Generated by ChatGPT

import subprocess
import tempfile
import os, sys

def generate_pdf_from_python_script(script_path, output_pdf_path):
    """
    Generates a PDF from a Python script using Pandoc.
    
    Args:
        script_path (str): The path to the Python script file.
        output_pdf_path (str): The path where the output PDF should be saved.
        
    Raises:
        FileNotFoundError: If the script file does not exist.
        RuntimeError: If the Pandoc command fails.
    """
    if not os.path.exists(script_path):
        raise FileNotFoundError(f"The file '{script_path}' does not exist.")
    
    # try:
    # Read the Python script content
    with open(script_path, "r") as script_file:
        script_content = script_file.read()
    
    preamble = r"""
---
fontsize: 10pt
papersize: a4
margin-left: 2cm
margin-right: 2cm
numbersections: true
header-includes: |
    \usepackage{fancyhdr}
    \pagestyle{fancy}
    \fancyfoot[CO,CE]{RB}
    \fancyfoot[LE,RO]{\thepage}
---
"""
    # Prepare Markdown content with syntax highlighting
    markdown_content = f"""
{preamble}

# PDF Generated from {os.path.basename(script_path)}

```python
{script_content}
```
"""
    # Create a temporary Markdown file
    with tempfile.NamedTemporaryFile(suffix=".md", delete=False) as temp_md_file:
        temp_md_path = temp_md_file.name
        temp_md_file.write(markdown_content.encode("utf-8"))
    
    print('running pandoc')

    # Run Pandoc to convert the Markdown file to a PDF
    command = ["pandoc", temp_md_path, "-o", output_pdf_path]
    result = subprocess.run(command, capture_output=True, text=True)
    
    # Check for errors
    if result.returncode != 0:
        raise RuntimeError(f"Pandoc error: {result.stderr}")
    
    print(f"PDF generated successfully: {output_pdf_path}")

    # finally:
    #     # Clean up the temporary Markdown file
    #     if os.path.exists(temp_md_path):
    #         os.remove(temp_md_path)

if __name__ == "__main__": # Ensure a filename is provided as a command-line argument if len(sys.argv) != 2: print("Usage: python script_to_pdf.py <path_to_python_script>") sys.exit(1)
    script_path = sys.argv[1]
    output_path = os.path.splitext(script_path)[0] + ".pdf"  # Default output PDF file name

    print(f"Converting Python script to PDF: {script_path} -> {output_path}")

    # try:
    generate_pdf_from_python_script(script_path, output_path)
    # except FileNotFoundError as e:
    #     print(f"Error: {e}")
    # except RuntimeError as e:
    #     print(f"Error during PDF generation: {e}")

