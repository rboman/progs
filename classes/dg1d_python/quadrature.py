#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# quadrature rules

import numpy as np


class Gauss(object):
    def __init__(self, npg=2):
        self.npg = npg
        self.xg, self.pg = self.getxp(npg)
        if 0:
            print 'xg=', self.xg
            print 'pg=', self.pg
            print 'sum(pg)=', np.sum(self.pg), ' (should be =2)'

    def getxp(self, npg):
        """ positions and weights of Gauss quadrature
        for npg between 1 and 9
        (adapted from "ppgo8.f"!)
        """

        X = [5.0000000000000000e-01, 2.1132486540518712e-01,
             7.8867513459481288e-01, 1.1270166537925831e-01,
             5.0000000000000000e-01, 8.8729833462074169e-01,
             6.9431844202973714e-02, 3.3000947820757187e-01,
             6.6999052179242813e-01, 9.3056815579702629e-01,
             4.6910077030668004e-02, 2.3076534494715845e-01,
             5.0000000000000000e-01, 7.6923465505284155e-01,
             9.5308992296933200e-01, 3.3765242898423986e-02,
             1.6939530676686775e-01, 3.8069040695840155e-01,
             6.1930959304159845e-01, 8.3060469323313225e-01,
             9.6623475710157601e-01, 2.5446043828620738e-02,
             1.2923440720030278e-01, 2.9707742431130142e-01,
             5.0000000000000000e-01, 7.0292257568869858e-01,
             8.7076559279969722e-01, 9.7455395617137926e-01,
             1.9855071751231884e-02, 1.0166676129318664e-01,
             2.3723379504183550e-01, 4.0828267875217510e-01,
             5.9171732124782490e-01, 7.6276620495816450e-01,
             8.9833323870681336e-01, 9.8014492824876812e-01,
             1.5919880246186955e-02, 8.1984446336682101e-02,
             1.9331428364970479e-01, 3.3787328829809554e-01,
             5.0000000000000000e-01, 6.6212671170190446e-01,
             8.0668571635029521e-01, 9.1801555366331790e-01,
             9.8408011975381304e-01, 1.3046735741414140e-02,
             6.7468316655507746e-02, 1.6029521585048780e-01,
             2.8330230293537639e-01, 4.2556283050918439e-01,
             5.7443716949081561e-01, 7.1669769706462361e-01,
             8.3970478414951220e-01, 9.3253168334449225e-01,
             9.8695326425858586e-01]

        W = [1.0000000000000000e+00, 5.0000000000000000e-01,
             5.0000000000000000e-01, 2.7777777777777778e-01,
             4.4444444444444443e-01, 2.7777777777777778e-01,
             1.7392742256872692e-01, 3.2607257743127308e-01,
             3.2607257743127308e-01, 1.7392742256872692e-01,
             1.1846344252809454e-01, 2.3931433524968324e-01,
             2.8444444444444444e-01, 2.3931433524968324e-01,
             1.1846344252809454e-01, 8.5662246189585178e-02,
             1.8038078652406930e-01, 2.3395696728634552e-01,
             2.3395696728634552e-01, 1.8038078652406930e-01,
             8.5662246189585178e-02, 6.4742483084434851e-02,
             1.3985269574463834e-01, 1.9091502525255948e-01,
             2.0897959183673469e-01, 1.9091502525255948e-01,
             1.3985269574463834e-01, 6.4742483084434851e-02,
             5.0614268145188130e-02, 1.1119051722668724e-01,
             1.5685332293894363e-01, 1.8134189168918100e-01,
             1.8134189168918100e-01, 1.5685332293894363e-01,
             1.1119051722668724e-01, 5.0614268145188130e-02,
             4.0637194180787206e-02, 9.0324080347428698e-02,
             1.3030534820146773e-01, 1.5617353852000142e-01,
             1.6511967750062988e-01, 1.5617353852000142e-01,
             1.3030534820146773e-01, 9.0324080347428698e-02,
             4.0637194180787206e-02, 3.3335672154344069e-02,
             7.4725674575290293e-02, 1.0954318125799102e-01,
             1.3463335965499817e-01, 1.4776211235737644e-01,
             1.4776211235737644e-01, 1.3463335965499817e-01,
             1.0954318125799102e-01, 7.4725674575290293e-02,
             3.3335672154344069e-02]

        if npg > 10 or npg < 1:
            raise Exception('npg should be between 1 and 9')

        xg = np.zeros(npg)
        wg = np.zeros(npg)

        j = (npg - 1) * npg / 2 - 1
        for i in range(npg):
            j += 1
            xg[i] = 2*X[j] - 1.0
            wg[i] = 2*W[j]

        return xg, wg

if __name__=="__main__":
    pass
    # TODO: test routines!
