CMAKE_MINIMUM_REQUIRED(VERSION 3.1)
PROJECT(LBM CXX)

SET(CMAKE_CXX_STANDARD 14)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)

# build type is "" by default in Linux
IF(NOT CMAKE_BUILD_TYPE)
    SET( CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
ENDIF()

# compiler settings
MESSAGE("CMAKE_CXX_COMPILER_ID=${CMAKE_CXX_COMPILER_ID}")
IF(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    # ADD_DEFINITIONS(-DUNICODE)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")  # parallel build with MSVC
    ADD_DEFINITIONS(-D_USE_MATH_DEFINES) # for M_PI
ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    ADD_DEFINITIONS(-DFORCE_EXPERIMENTAL_FS) 
    ADD_DEFINITIONS(-fpermissive)
    set(THREADS_PREFER_PTHREAD_FLAG ON)
    find_package(Threads REQUIRED)
    find_package(X11 REQUIRED)
    message(STATUS "X11_FOUND = ${X11_FOUND}")
    message(STATUS "X11_INCLUDE_DIR = ${X11_INCLUDE_DIR}")
    message(STATUS "X11_LIBRARIES = ${X11_LIBRARIES}")
    include_directories(${X11_INCLUDE_DIR})
    find_package(OpenGL REQUIRED)
    find_package(PNG REQUIRED)
ENDIF()

# find Eigen
FIND_PATH(EIGEN_INCLUDE_DIRS "Eigen/Dense" PATHS "${PROJECT_SOURCE_DIR}/../../externals/eigen" REQUIRED)
MESSAGE(STATUS "EIGEN_INCLUDE_DIRS=" ${EIGEN_INCLUDE_DIRS})

# find PGE
FIND_PATH(OLC_INCLUDE_DIRS "olcPixelGameEngine.h" PATHS "${PROJECT_SOURCE_DIR}/../../externals/olcPixelGameEngine" REQUIRED)
MESSAGE(STATUS "OLC_INCLUDE_DIRS=${OLC_INCLUDE_DIRS}")

# executable
SET(SRCS main.cpp pgengine.cpp lbm.cpp pgwindow.cpp)
ADD_EXECUTABLE(lbm ${SRCS})
TARGET_INCLUDE_DIRECTORIES(lbm PUBLIC ${EIGEN_INCLUDE_DIRS})
TARGET_INCLUDE_DIRECTORIES(lbm PUBLIC ${OLC_INCLUDE_DIRS})
IF(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    target_link_libraries(lbm Threads::Threads PNG::PNG ${OPENGL_LIBRARIES} ${X11_LIBRARIES} stdc++fs)
ENDIF()