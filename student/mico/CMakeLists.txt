CMAKE_MINIMUM_REQUIRED(VERSION 3.1)
PROJECT(FPROGS Fortran C)

#SET(CMAKE_VERBOSE_MAKEFILE TRUE) # affiche les lignes de commande

# configure Fortran compiler
GET_FILENAME_COMPONENT(Fortran_COMPILER_NAME ${CMAKE_Fortran_COMPILER} NAME)

IF(Fortran_COMPILER_NAME MATCHES "f95")
    SET(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -Wall") 
ENDIF()

MESSAGE(STATUS "Fortran_COMPILER_NAME        : " ${Fortran_COMPILER_NAME})
MESSAGE(STATUS "CMAKE_Fortran_FLAGS          : " ${CMAKE_Fortran_FLAGS})
MESSAGE(STATUS "CMAKE_Fortran_FLAGS_RELEASE  : " ${CMAKE_Fortran_FLAGS_RELEASE})
MESSAGE(STATUS "CMAKE_Fortran_FLAGS_DEBUG    : " ${CMAKE_Fortran_FLAGS_DEBUG})

# ADD_EXECUTABLE(theoric theoric.for) # .f90/.f95 => free format | .f/.for => fixed

# ENABLE_TESTING()
# ADD_TEST(NAME theoric COMMAND ${EXECUTABLE_OUTPUT_PATH}/theoric
#          WORKING_DIRECTORY ${PROJECT_BINARY_DIR})



# Python interface
LIST(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/../../sandbox/fortranpython")
FIND_PACKAGE(F2PY REQUIRED)


SET(SRCS_F ${CMAKE_CURRENT_SOURCE_DIR}/theoric.f90
           ${CMAKE_CURRENT_SOURCE_DIR}/newtonr.f90
)
F2PY_MACRO(mico SRCS_F TRUE)
