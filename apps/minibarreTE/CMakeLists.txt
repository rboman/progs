CMAKE_MINIMUM_REQUIRED(VERSION 3.1)
PROJECT(minibarreTE)

# send all binaries to ./bin
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin CACHE PATH "")
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin CACHE PATH "")
MARK_AS_ADVANCED(LIBRARY_OUTPUT_PATH EXECUTABLE_OUTPUT_PATH)

# on Linux, set optimisation by default
IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
ENDIF()

# compiler settings
IF(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_DEPRECATE)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")  # parallel build with MSVC
ENDIF()

# -- Search for Python
FIND_PACKAGE(PythonInterp 2.7 REQUIRED)
FIND_PACKAGE(PythonLibs 2.7 REQUIRED)

# -- Search for SWIG
FIND_PACKAGE(SWIG REQUIRED)
IF(CMAKE_GENERATOR MATCHES "Visual Studio") # not MSVC because of nmake & jom
    SET(CMAKE_SWIG_OUTDIR "${EXECUTABLE_OUTPUT_PATH}/$(Configuration)/")
ELSE()
    SET(CMAKE_SWIG_OUTDIR "${EXECUTABLE_OUTPUT_PATH}")
ENDIF()

# -- GMM --
FIND_PATH(GMM_INCLUDE_DIRS "gmm/gmm.h")
INCLUDE_DIRECTORIES(${GMM_INCLUDE_DIRS})
#ADD_DEFINITIONS(-DGMM_USES_LAPACK)  
#ADD_DEFINITIONS(-DGMM_USES_MUMPS)

# -- Sub directories

ADD_SUBDIRECTORY( couplage )
ADD_SUBDIRECTORY( _couplage )

ADD_SUBDIRECTORY( minib )
ADD_SUBDIRECTORY( etage )
