CMAKE_MINIMUM_REQUIRED(VERSION 3.1)
PROJECT(FPROGS Fortran C )

#SET(CMAKE_VERBOSE_MAKEFILE TRUE) # affiche les lignes de commande

# configure Fortran compiler
GET_FILENAME_COMPONENT(Fortran_COMPILER_NAME ${CMAKE_Fortran_COMPILER} NAME)

IF(Fortran_COMPILER_NAME MATCHES "f95")
    SET(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -Wall") 
ENDIF()

MESSAGE(STATUS "Fortran_COMPILER_NAME        : " ${Fortran_COMPILER_NAME})
MESSAGE(STATUS "CMAKE_Fortran_FLAGS          : " ${CMAKE_Fortran_FLAGS})
MESSAGE(STATUS "CMAKE_Fortran_FLAGS_RELEASE  : " ${CMAKE_Fortran_FLAGS_RELEASE})
MESSAGE(STATUS "CMAKE_Fortran_FLAGS_DEBUG    : " ${CMAKE_Fortran_FLAGS_DEBUG})



# Use FindF2PY.cmake
LIST(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}")
FIND_PACKAGE(F2PY REQUIRED)


SET(F2PYMODULE vect)
SET(FSRCS ${CMAKE_CURRENT_SOURCE_DIR}/norme.f90 ${CMAKE_CURRENT_SOURCE_DIR}/fib.f)

ADD_CUSTOM_COMMAND(
    OUTPUT vectmodule.c
    COMMAND ${F2PY_EXECUTABLE}
    -m ${F2PYMODULE}
    --lower   # gcc cree du lowercase quel que soit le nom dans le code
    ${FSRCS}
    DEPENDS ${FSRCS}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
)

# static library "vectfor" with the source
ADD_LIBRARY(vectfor ${FSRCS})

# shared .pyd "vect" 
ADD_LIBRARY(vect SHARED vectmodule.c ${F2PY_SRC_DIR}/fortranobject.c ) 
SET_TARGET_PROPERTIES(vect PROPERTIES SUFFIX .pyd)
SET_TARGET_PROPERTIES(vect PROPERTIES PREFIX "")
TARGET_INCLUDE_DIRECTORIES(vect PRIVATE ${PYTHON_INCLUDE_PATH})
TARGET_INCLUDE_DIRECTORIES(vect PRIVATE ${F2PY_SRC_DIR})

TARGET_LINK_LIBRARIES(vect vectfor ${PYTHON_LIBRARY})

